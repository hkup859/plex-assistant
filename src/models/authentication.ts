// const timestamps = require('mongoose-timestamp');
// const uuid = require('uuid')
const mongoose = require('mongoose')
const timestamps = require('mongoose-timestamp')

const AuthenticationSchema = new mongoose.Schema({
    email: {
        type: String,
        required: true,
    },
    password: {
        type: String,
        required: true, // TODO - Require if movie?, TV Shows will not have this
    },
    pin: {
        type: String, // TODO - restrict to a 4 digit PIN
        required: false,
    },
    profileUsername: {
        type: String, // TODO - restrict to a certain length
        required: false,
    },
    // createdAt & updatedAt are automatically generated by the timestamps plugin
})

// createdAt & updatedAt are automatically generated by the timestamps plugin
AuthenticationSchema.plugin(timestamps);

// Create mongoose connection
const Authentication = mongoose.connection.model('Authentication', AuthenticationSchema);

export const createAuthentication = async (authenticationObject: any): Promise<any> => {
  try {
        console.log('In Authentication Model createAuthentication')
        const authentication = new Authentication(authenticationObject)
        const newAuthentication = await authentication.save()
        if (newAuthentication && newAuthentication._id)
            return newAuthentication
        else
            throw new Error("Failed to create authentication record. No _id after attempting to save.")
  } catch (err) {
        console.log(`Fatal Error In Authentication Model createAuthentication: ${err}`)
        throw err
  }
}

// TODO - Should this instead use save() so that timestamps work automatically? This adds inefficiency because a find is required, but adds timestamp simplicity.
// TODO - Should add api authentication and track who made the update
export const updateAuthentication = async (encryptedEmail: string, authenticationUpdateObject: any): Promise<any> => {
    try {
        console.log('In Authentication Model updateAuthentication')
        const updateQuery = {
            $set: {
                updatedAt: new Date(),
                ...authenticationUpdateObject
            }
        }
        const updateResults = await Authentication.updateOne({ email: encryptedEmail }, updateQuery)
        if (updateResults) // TODO - Provide optional return of the saved media object?
            return "success"
        else
            throw new Error("Failed to update authentication record.")
    } catch (err) {
        console.log(`Fatal Error In Authentication Model updateAuthentication: ${err}`)
        throw err
    }
}

export const findAuthenticationByEmail = async (encryptedEmail: string): Promise<any> => {
    try {
        console.log('In Authentication Model findAuthenticationByEmail')
        const results = await Authentication.find({ email: encryptedEmail })
        if (results.length === 1) return results[0]
        else if (results.length === 0) return undefined
        else throw Error("Found multiple authentications with the same email")
    } catch (err) {
        console.log(`Fatal Error In Authentication Model findAuthenticationByEmail: ${err}`)
        throw err
    }
}